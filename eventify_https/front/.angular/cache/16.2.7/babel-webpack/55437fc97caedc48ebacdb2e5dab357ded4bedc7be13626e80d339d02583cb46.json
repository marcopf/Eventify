{"ast":null,"code":"import { sha256 } from 'js-sha256';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api-call.service\";\nimport * as i2 from \"@angular/router\";\n//do thing depending on the response from sign api call\n//like routing to email confirm if call was successfull or trigger error when needed \nfunction handleSignupRequest(data, dup_this, formEl, api, route) {\n  if (data.ok) {\n    api.signupImage(dup_this.signin.file, dup_this.signin.username, data, 0).then(data => {\n      dup_this.signUpError = false;\n      route.navigate(['/emailAlert']).then(() => {});\n    });\n  } else {\n    formEl.classList.toggle(\"shake\");\n    setTimeout(() => {\n      formEl.classList.toggle(\"shake\");\n    }, 500);\n    dup_this.signUpError = true;\n  }\n}\nexport let SignupService = /*#__PURE__*/(() => {\n  class SignupService {\n    checkForError() {\n      for (let el of this.errors) {\n        if (el) return true;\n      }\n      return false;\n    }\n    performCheck() {\n      let flag = true;\n      if (!this.checkEmail()) flag = false;\n      if (!this.checkDate()) flag = false;\n      return flag;\n    }\n    rcheckMsg(str) {\n      let flag = 0;\n      for (let el of this.error_text) if (el == str) flag = 1;\n      if (!flag) this.error_text.push(str);\n      return true;\n    }\n    //REMOVE THE MESAGE FROM LIST IF IT'S FOUND (FOR REPEATED PASSWORD)\n    rremoveMsg(str) {\n      let toDelete = -1;\n      for (let i = 0; i < this.error_text.length; i++) {\n        if (this.error_text[i] == str) toDelete = i;\n      }\n      if (toDelete != -1) delete this.error_text[toDelete];\n    }\n    //simpli apply all the check returning true or false depending from check result\n    validate(str) {\n      if (str.length > 8 && str.length < 256 && str.match(/[0123456789]/) && str.match(/[!@#$%^&*()_+\\-=ˆ\\[\\]{};:'\",.<>?~]/) && str.match(/[QWERTYUIOPASDFGHJKLZXCVBNM]/)) return true;\n      return false;\n    }\n    //function that check the presence of file and modify the selector\n    //showing the selected file\n    checkFile(event) {\n      const inp = event?.currentTarget;\n      const lab = document.querySelector(\".file\");\n      const icon = document.createElement(\"i\");\n      icon.classList.add(\"fa-solid\");\n      icon.classList.add(\"fa-circle-check\");\n      this.signin.file = inp.files.item(0);\n      lab.textContent = inp.files.item(0).name + \"\\xa0\\xa0\";\n      lab.appendChild(icon);\n    }\n    //function that check the input date in particular che if the user \n    //is at least 18 years old\n    checkDate() {\n      const inp = document.querySelector(\"#birthDate\");\n      const dateLabel = document.querySelector(\".dateLabel\");\n      const splitted = this.signin.date.split(\"-\");\n      if (!(new Date(Number(splitted[0]) + 18, Number(splitted[1]) - 1, Number(splitted[2])) <= new Date())) {\n        inp.style.backgroundColor = \"var(--darkErr-col)\";\n        this.errors[1] = true;\n        if (!dateLabel.innerText.includes(\"(you must be adult!)\")) dateLabel.innerText = dateLabel.innerText + \"(you must be adult!)\";\n        return false;\n      }\n      dateLabel.innerText = \"Birth Date: \";\n      inp.style.backgroundColor = \"white\";\n      this.errors[1] = false;\n      return true;\n    }\n    //function that ched the email and set the ui error if needed\n    checkEmail() {\n      const email = document.querySelector(\"#email\");\n      const emailLab = document.querySelector(\".emailLabel\");\n      if (!this.signin.email.match(this.emailReg) || this.signin.email == \"\") {\n        email.style.backgroundColor = \"var(--darkErr-col)\";\n        if (!emailLab.innerText.includes(\"(email not valid)\")) emailLab.innerText = emailLab.innerText + \"(email not valid)\";\n        this.errors[0] = true;\n        return false;\n      }\n      email.style.backgroundColor = \"white\";\n      emailLab.innerText = \"Email: \";\n      this.errors[0] = false;\n      return true;\n    }\n    //function that check the signup password with regex expression for\n    //uppercase letter number special character and min len\n    rPassCheck() {\n      //check password length\n      !(this.signin.password.length > 8 && this.signin.password.length < 256) ? this.errors[2] = this.rcheckMsg(\"password length range (8-256)\") : this.rremoveMsg(\"password length range (8-256)\");\n      //check the presence of at least one number\n      !this.signin.password.match(/[0123456789]/) ? this.errors[2] = this.rcheckMsg(\"password must contain at least one number\") : this.rremoveMsg(\"password must contain at least one number\");\n      //check the presence of at least one special character\n      !this.signin.password.match(/[!@#$%^&*()_+\\-=ˆ\\[\\]{};:'\",.<>?~]/) ? this.errors[2] = this.rcheckMsg(\"password must contain at least one special character\") : this.rremoveMsg(\"password must contain at least one special character\");\n      //check the presence of at least one uppercase letter\n      !this.signin.password.match(/[QWERTYUIOPASDFGHJKLZXCVBNM]/) ? this.errors[2] = this.rcheckMsg(\"password must contain at least one uppercase letter\") : this.rremoveMsg(\"password must contain at least one uppercase letter\");\n      //check if the repeated password match the first one\n      this.signin.password === this.signin.confirm_password ? this.rremoveMsg(\"password does not match!\") : this.errors[2] = this.rcheckMsg(\"password does not match!\");\n      if (this.validate(this.signin.password) && this.validate(this.signin.confirm_password) && this.signin.password == this.signin.confirm_password) {\n        this.errors[2] = false;\n        this.error_text = [];\n      }\n    }\n    //handle data when signup button is clicked\n    signupSubmit() {\n      const formEl = document.querySelector(\"#signUp\");\n      const h1El = document.querySelector(\"#header\");\n      const formData = new FormData(formEl);\n      const data = {};\n      if (this.performCheck() && this.signin.username != \"\" && this.signin.name != \"\" && this.signin.surname != \"\" && this.validate(this.signin.password) && this.validate(this.signin.confirm_password) && this.signin.confirm_password == this.signin.password && this.signin.file != null) {\n        h1El.innerText = \"Sign up\";\n        formEl.style.border = 'unset';\n        h1El.style.color = \"var(--text-col)\";\n        formData.delete(\"profilePicture\");\n        formData.delete('rPassword');\n        formData.set('password', sha256(this.signin.password));\n        formData.forEach((value, key) => {\n          if (key == \"username\") {\n            let str = value;\n            data[key] = str.trim();\n          } else data[key] = value;\n        });\n        this.api.signup(data).then(data => {\n          handleSignupRequest(data, this, formEl, this.api, this.route);\n        }).catch(err => {\n          console.log(\"SIGNUPGIN ERROR: \", err);\n        });\n      } else {\n        if (!h1El.innerText.includes(\"(check your input!)\")) h1El.innerText = h1El.innerText + \"\\xa0(check your input!)\";\n        formEl.style.border = '3px solid var(--darkErr-col)';\n        h1El.style.color = \"var(--darkErr-col)\";\n        formEl.classList.toggle(\"shake\");\n        setTimeout(() => {\n          formEl.classList.toggle(\"shake\");\n        }, 500);\n        if (this.signin.password == \"\" || this.signin.confirm_password == \"\") this.errors[2] = true;\n      }\n    }\n    constructor(api, route) {\n      this.api = api;\n      this.route = route;\n      this.emailReg = /(?:[a-z0-9!#$%&'*+/=?^_{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n      this.error = false;\n      this.errors = [false, false, false, false];\n      this.error_text = [];\n      this.signUpError = false;\n      this.signin = {\n        name: \"\",\n        surname: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\",\n        date: \"\",\n        file: null\n      };\n    }\n    static #_ = this.ɵfac = function SignupService_Factory(t) {\n      return new (t || SignupService)(i0.ɵɵinject(i1.ApiCallService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SignupService,\n      factory: SignupService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return SignupService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}