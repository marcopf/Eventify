{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport language from '../../assets/label';\nimport * as i0 from \"@angular/core\";\nexport let GeneralFuncService = /*#__PURE__*/(() => {\n  class GeneralFuncService {\n    //get the JWT cookie as a string\n    getJwtString() {\n      let jwtVal = \"\";\n      for (let cookie of document.cookie.split('; ')) {\n        if (cookie.substring(0, 20) == \"authorization=Bearer\") {\n          jwtVal = cookie.substring(23);\n          return jwtVal;\n        }\n      }\n      return jwtVal;\n    }\n    //get JWT and decode it making it readable\n    getJwt() {\n      let jwtVal = \"\";\n      for (let cookie of document.cookie.split('; ')) {\n        if (cookie.substring(0, 20) == \"authorization=Bearer\") {\n          jwtVal = jwtDecode(cookie.substring(23));\n          return jwtVal;\n        }\n      }\n      return jwtVal;\n    }\n    //once JWT is readable check that role match ADMIN\n    //the function return true flase otherwise \n    isAdmin() {\n      if (this.getJwt().scope == \"ADMIN\") return true;\n      return false;\n    }\n    //first check if JWT is present then return the name field(sub)\n    getUserName() {\n      if (this.getJwt() != \"\") return this.getJwt().sub;\n      return null;\n    }\n    //simply check if the jwt is present and verified if so return true\n    isLogged() {\n      if (this.getJwt() != \"\") return true;\n      return false;\n    }\n    //function that switch language when language option element value change\n    //the new leanguage come from label.ts in /assets\n    switchLanguage() {\n      const newLang = document.querySelector(\"#lan\");\n      this.label = this.languages[newLang.value];\n      sessionStorage.setItem(\"language\", newLang.value);\n    }\n    constructor() {\n      this.actualLanguage = \"en\";\n      this.languages = language;\n      this.label = this.languages[this.actualLanguage];\n    }\n    static #_ = this.ɵfac = function GeneralFuncService_Factory(t) {\n      return new (t || GeneralFuncService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GeneralFuncService,\n      factory: GeneralFuncService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GeneralFuncService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}