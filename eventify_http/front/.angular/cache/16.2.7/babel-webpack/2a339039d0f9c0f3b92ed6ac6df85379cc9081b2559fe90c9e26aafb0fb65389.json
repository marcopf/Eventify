{"ast":null,"code":"import _asyncToGenerator from \"/home/gpanico/Desktop/Leonardo_Team_Trinity/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { API } from './ApiPath';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./new-event.service\";\nimport * as i3 from \"./events.service\";\nimport * as i4 from \"./general-func.service\";\nexport let ApiCallService = /*#__PURE__*/(() => {\n  class ApiCallService {\n    /*\n        send GET request that refresh the JWT token trough the validation\n        of the http only refresh token\n    */\n    refreshToken() {\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.REFRESH_TOKEN, {\n          credentials: 'include',\n          method: \"GET\"\n        });\n        return res;\n      })();\n    }\n    /*\n        FILE:\t\t\tcontain the profile picture selcted by the user,\n        USERNAME:\t\tusername of related to the picture,\n        INFORESPONSE\tresponse object coming from API request that post new user info,\n        DEEP\t\t\tnumber that is used as flag to make the call to refresh token when needed\n         send POST with the profile picture of the new created user\n    */\n    signupImage(file, username, infoResponse, deep) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const pict = new FormData();\n        const responseJson = yield infoResponse.json();\n        pict.set(\"image\", file);\n        const pictRes = yield fetch(API.POST_SIGNUP_IMAGE + `?token=${responseJson.uploadCode}`, {\n          method: \"POST\",\n          body: pict\n        });\n        if (pictRes.status == 401 && deep == undefined) {\n          _this.refreshToken().then(res => {\n            if (res.ok) _this.signupImage(file, username, infoResponse, 1);else _this.route.navigate(['/login']);\n          });\n        }\n        return pictRes;\n      })();\n    }\n    /*\n        NAME\t\tthe name of the tag to be removed\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n         send DELETE request that delete the tag idefied by NAME from db\n    */\n    removeTag(name, deep) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        let trimmed = name.trim();\n        const res = yield fetch(API.DELETE_TAG + `?categoryName=${trimmed}`, {\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this2.gFunc.getJwtString()\n          },\n          method: \"DELETE\"\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this2.refreshToken().then(res => {\n            if (res.ok) _this2.removeTag(name, 1);else _this2.route.navigate(['/login']);\n          });\n        }\n        if (res.ok) return true;\n        return false;\n      })();\n    }\n    /*\n        NAME\t\t\tname of the tage to be modified\n        MODIFIEDTAG\t\tvalue of the modified tag\n        DEEP\t\t\tnumber that is used as flag to make the call to refresh token when needed\n         send PUT request that modify the tage identified by NAME replacing it with\n        MODIFIEDTAG value\n    */\n    modifyTag(name, modifiedTag, deep) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.PUT_MODIFY_TAG + \"?categoryName=\" + name, {\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this3.gFunc.getJwtString(),\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            \"categoryName\": modifiedTag\n          }),\n          method: \"PUT\"\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this3.refreshToken().then(res => {\n            if (res.ok) _this3.modifyTag(name, modifiedTag, 1);else _this3.route.navigate(['/login']);\n          });\n        }\n        if (res.ok) return true;\n        return false;\n      })();\n    }\n    /*\n        NEWTAGS\t\tJSON like value that contain all the new tag to be added,\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n         send POST request with NEWTAGS inside the body that add the new tag to db\n    */\n    addTags(newTags, deep) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.POST_ADD_TAGS, {\n          credentials: 'include',\n          method: \"POST\",\n          headers: {\n            \"authorization\": \"Bearer \" + _this4.gFunc.getJwtString(),\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(newTags)\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this4.refreshToken().then(res => {\n            if (res.ok) _this4.addTags(newTags, 1);else _this4.route.navigate(['/login']);\n          });\n        }\n        if (res.ok) return true;\n        return false;\n      })();\n    }\n    /*\n        DATA\tall info entered by the user from signup form\n        DEEP\tnumber that is used as flag to make the call to refresh token when needed\n         send POST request with all new user info inside the body\n        in JSON format and call another func to send profile pict to server\n    */\n    signup(data, deep) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        const dataRes = yield fetch(API.POST_SIGNUP_INFO, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(data),\n          credentials: 'include'\n        });\n        if (dataRes.status == 401 && deep == undefined) {\n          _this5.refreshToken().then(res => {\n            if (res.ok) _this5.signup(data, 1);\n          });\n        }\n        return dataRes;\n      })();\n    }\n    /*\n        DATA\tcontain username and password to be sent and validate\n        DEEP\tnumber that is used as flag to make the call to refresh token when needed\n         send POST request with input username and crypted password\n        (SHA256) inside the body in JSON format\n    */\n    login(data, deep) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.POST_LOGIN, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Content-Length\": String(JSON.stringify(data).length)\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this6.refreshToken().then(res => {\n            if (res.ok) _this6.login(data, 1);\n          });\n        }\n        return res;\n      })();\n    }\n    /*\n        LIST\tlist of string that store the URL of the images once has been retrieved from the served\n        INDEX\tnumber that is use d as index to access LIST var\n        DEEP\tnumber that is used as flag to make the call to refresh token when needed\n         send GET request asking for an initial set of event card\n        to display in the home-event view\n    */\n    getEventImage(list, index, id) {\n      return _asyncToGenerator(function* () {\n        fetch(API.GET_EVENT_IMAGE + `?eventId=${id}&imageNum=${index}`, {\n          method: \"GET\"\n        }).then(imageBlob => {\n          if (!imageBlob.ok) return undefined;\n          return imageBlob.blob();\n        }).then(imageBlob => {\n          if (imageBlob == undefined) list[index] = \"/assets/imageBackup.jpg\";else list[index] = URL.createObjectURL(imageBlob);\n        }).catch(err => {\n          console.log(\"ERROR WHILE GETTING IMAGE \", err);\n          list[index] = \"/assets/imageBackup.jpg\";\n        });\n      })();\n    }\n    /*\n        USERNAME\t\tvariable that store the username that will be used to search his photo from db\n        USERIMAGE\t\tlist of string that store the URL of the images once has been retrieved from the served\n        INDEX\t\t\tnumber that is use d as index to access USERIMAGE var\n         send GET request that retrive image of specified user passing its username\n    */\n    getUserImage(username, userImage, index) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        fetch(API.GET_USER_IMAGE + `?username=${username}`, {\n          method: \"GET\",\n          headers: {\n            \"authorization\": \"Bearer \" + _this7.gFunc.getJwtString()\n          },\n          credentials: 'include'\n        }).then(imageBlob => {\n          if (!imageBlob.ok) {\n            userImage[0] = \"/assets/backUpProfilePict.png\";\n            return undefined;\n          }\n          return imageBlob.blob();\n        }).then(imageBlob => {\n          if (index != undefined) {\n            if (imageBlob == undefined) userImage[index] = \"/assets/backUpProfilePict.png\";else userImage[index] = URL.createObjectURL(imageBlob);\n          } else if (index == undefined && imageBlob == undefined) userImage[0] = \"/assets/backUpProfilePict.png\";else if (imageBlob != undefined) userImage[0] = URL.createObjectURL(imageBlob);\n        }).catch(err => {\n          console.log(\"ERROR WHILE GETTING IMAGE \", err);\n          userImage[0] = \"/assets/backUpProfilePict.png\";\n        });\n      })();\n    }\n    /*\n        PAGE\tsomethong like a counter that is incremented everytime the \"infinite scroll\" is called\n        DEEP\tnumber that is used as flag to make the call to refresh token when needed\n         send GET request that retrive a first set of events from database and is called again\n        everytime you need more events\n    */\n    getBaseEvents(page, deep) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.GET_INITIAL_EVENTS, {\n          credentials: 'include',\n          method: \"GET\"\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this8.refreshToken().then(res => {\n            if (res.ok) _this8.getBaseEvents(page, 1);else _this8.route.navigate(['/login']);\n          });\n        }\n        if (res.ok) {\n          _this8.events.events = yield res.json();\n          return _this8.events.events;\n        }\n        return [];\n      })();\n    }\n    /*\n        DEEP\tnumber that is used as flag to make the call to refresh token when needed\n         send GET request asking for all the event where the current\n        user is registered\n    */\n    getRegisteredEvents(deep) {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.GET_REGISTERED_EVENTS, {\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this9.gFunc.getJwtString()\n          },\n          method: \"GET\"\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this9.refreshToken().then(res => {\n            if (res.ok) _this9.getRegisteredEvents(1);else _this9.route.navigate(['/login']);\n          });\n        }\n        if (res.ok) return yield res.json();\n        return [];\n      })();\n    }\n    getOwnCreatedEvents(deep) {\n      var _this10 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.GET_OWN_CREATED_EVENTS, {\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this10.gFunc.getJwtString()\n          },\n          method: \"GET\"\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this10.refreshToken().then(res => {\n            if (res.ok) _this10.getRegisteredEvents(1);else _this10.route.navigate(['/login']);\n          });\n        }\n        if (res.ok) return yield res.json();\n        return [];\n      })();\n    }\n    /*\n        DEEP\tnumber that is used as flag to make the call to refresh token when needed\n         send GET request asking for a singlue user full info\n        used in userinfo page\n    */\n    getUserInfo(deep) {\n      var _this11 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.GET_USER_INFO + \"?username=\" + _this11.gFunc.getUserName(), {\n          headers: {\n            \"authorization\": \"Bearer \" + _this11.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          method: \"GET\"\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this11.refreshToken().then(res => {\n            if (res.ok) _this11.getUserInfo(1);else _this11.route.navigate(['/login']);\n          });\n        }\n        if (res.ok) return yield res.json();\n        return null;\n      })();\n    }\n    /*\n        DEEP\tnumber that is used as flag to make the call to refresh token when needed\n         send a GET request that retrive all the tags contained inside the db\n    */\n    getTags(deep) {\n      var _this12 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.GET_TAGS, {\n          headers: {\n            \"authorization\": \"Bearer \" + _this12.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          method: \"GET\"\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this12.refreshToken().then(res => {\n            if (res.ok) _this12.getTags(1);else _this12.route.navigate(['/login']);\n          });\n        }\n        if (res.ok) return yield res.json();\n        return null;\n      })();\n    }\n    /*\n        DEEP\tnumber that is used as flag to make the call to refresh token when needed\n        ID\t\tid value used to access the info related to a single event\n         send POST asking for full details of (ID) event-card\n        the body will contain the requested event-card's id\n    */\n    getSingleEvent(id, deep) {\n      var _this13 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.GET_SINGLE_EVENT + \"?id=\" + id, {\n          method: \"GET\",\n          headers: {\n            \"authorization\": \"Bearer \" + _this13.gFunc.getJwtString()\n          }\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this13.refreshToken().then(res => {\n            if (res.ok) _this13.getSingleEvent(id, 1);else _this13.route.navigate(['/login']);\n          });\n        }\n        if (res.ok) return yield res.json();\n        return {};\n      })();\n    }\n    /*\n        IMAGES\t\tvariable that contain all the image coming from new event form\n        ID\t\t\tid that is used to link the IMAGES  to the right event\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n         send POST request with event-card related images\n    */\n    postImage(images, id, deep) {\n      var _this14 = this;\n      return _asyncToGenerator(function* () {\n        const imagePost = yield fetch(API.POST_NEW_EVENT_IMAGES + `?eventId=${id}`, {\n          method: \"POST\",\n          headers: {\n            \"authorization\": \"Bearer \" + _this14.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          body: images\n        });\n        if (imagePost.status == 401 && deep == undefined) {\n          _this14.refreshToken().then(res => {\n            if (res.ok) _this14.postImage(images, id, 1);else _this14.route.navigate(['/login']);\n          });\n        }\n        return imagePost;\n      })();\n    }\n    /*\n        DATA\t\tvariable that contain all the info of the new event to be created\n        IMAGES\t\tvariable that contain all the image coming from new event form\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n         send POST request for new event-card text data (JSON)\n        related to the event-card and call the func that post\n        card related images\n    */\n    createEvent(data, images, deep) {\n      var _this15 = this;\n      return _asyncToGenerator(function* () {\n        const dataPost = yield fetch(API.POST_NEW_EVENT_INFO, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"authorization\": \"Bearer \" + _this15.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        });\n        if (dataPost.status == 401 && deep == undefined) {\n          _this15.refreshToken().then(res => {\n            if (res.ok) _this15.createEvent(data, images, 1);else _this15.route.navigate(['/login']);\n          });\n        }\n        if (dataPost.ok) {\n          const resJson = yield dataPost.json();\n          const postImage = yield _this15.postImage(images, resJson.id);\n          if (postImage.ok) _this15.route.navigate(['']);else {\n            _this15.route.navigate(['/events']);\n            return 1;\n          }\n        } else {\n          _this15.route.navigate(['/create-event']);\n          return 1;\n        }\n        return 0;\n      })();\n    }\n    /*\n        IMAGES\t\tvariable that contain all the image coming from new event form\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n        ID\t\t\tid that is used to link the IMAGES  to the right event\n         send POST request with new photo that will be used to update IMAGES\n        for the selected event (ID)\n    */\n    modifyEventImage(images, id, deep) {\n      var _this16 = this;\n      return _asyncToGenerator(function* () {\n        const imagePost = yield fetch(API.POST_NEW_EVENT_IMAGES + `?eventId=${id}`, {\n          method: \"POST\",\n          headers: {\n            \"authorization\": \"Bearer \" + _this16.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          body: images\n        });\n        if (imagePost.status == 401 && deep == undefined) {\n          _this16.refreshToken().then(res => {\n            if (res.ok) _this16.modifyEventImage(images, id, 1);else _this16.route.navigate(['/login']);\n          });\n        }\n        return imagePost;\n      })();\n    }\n    /*\n        DATA\t\tvariable that contain all the info of the new event to be created\n        IMAGES\t\tvariable that contain all the image coming from new event form\n        ID\t\t\tid that is used to link the IMAGES  to the right event\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n          send PUT request with new photo and data that will be used to update IMAGES and info\n        for the selected event (ID)\n    */\n    modifyEvent(data, images, id, deep) {\n      var _this17 = this;\n      return _asyncToGenerator(function* () {\n        const dataPost = yield fetch(API.POST_MODIFIED_EVENT_INFO + `?id=${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"authorization\": \"Bearer \" + _this17.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        });\n        if (dataPost.status == 401 && deep == undefined) {\n          _this17.refreshToken().then(res => {\n            if (res.ok) _this17.modifyEvent(data, images, id, 1);else _this17.route.navigate(['/login']);\n          });\n        }\n        if (dataPost.ok) {\n          if (!images.has(\"image\")) {\n            _this17.route.navigate(['/events']);\n            return 0;\n          }\n          const postImage = yield _this17.modifyEventImage(images, id);\n          if (postImage.ok) _this17.route.navigate(['']);else {\n            _this17.route.navigate(['/events']);\n            return 1;\n          }\n        } else {\n          _this17.route.navigate([`/modify-event/${id}`]);\n          return 1;\n        }\n        return 0;\n      })();\n    }\n    /*\n        DATA\t\tvariables that store the modified value that will be used to update user info\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n         send PUT request with all new info of the user used from the backend to update the value\n    */\n    updateUserInfo(data, deep) {\n      var _this18 = this;\n      return _asyncToGenerator(function* () {\n        const userInfoRes = yield fetch(API.PUT_NEW_USER_INFO, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"authorization\": \"Bearer \" + _this18.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        });\n        if (userInfoRes.ok) _this18.route.navigate(['']);\n        if (userInfoRes.status == 401 && deep == undefined) {\n          _this18.refreshToken().then(res => {\n            if (res.ok) _this18.updateUserInfo(data, 1);else _this18.route.navigate(['/login']);\n          });\n        }\n        return userInfoRes;\n      })();\n    }\n    /*\n        DATA\t\tvariables that store the old and the modified password\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n         send PUT request with the old and new password of the user used from the backend to update the value\n    */\n    updatePassword(data, deep) {\n      var _this19 = this;\n      return _asyncToGenerator(function* () {\n        const passwordRes = yield fetch(API.PUT_NEW_USER_PASSWORD, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"authorization\": \"Bearer \" + _this19.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          body: JSON.stringify(data)\n        });\n        if (passwordRes.ok) _this19.route.navigate(['']);\n        if (passwordRes.status == 401 && deep == undefined) {\n          _this19.refreshToken().then(res => {\n            if (res.ok) _this19.updatePassword(data, 1);else _this19.route.navigate(['/login']);\n          });\n        }\n        return passwordRes;\n      })();\n    }\n    /*\n        FILE\t\tvariable that store the new profile picture\n        USERNAME\tvariable that store the current user's username\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n         send a POST request with new picture that will be used from server to update the profile picture\n    */\n    updateProfilePicture(file, username, deep) {\n      var _this20 = this;\n      return _asyncToGenerator(function* () {\n        const pictFormData = new FormData();\n        pictFormData.set(\"image\", file);\n        const imagePost = yield fetch(API.POST_NEW_USER_PICTURE, {\n          method: \"POST\",\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this20.gFunc.getJwtString()\n          },\n          body: pictFormData\n        });\n        if (imagePost.ok) window.location.reload();\n        if (imagePost.status == 401 && deep == undefined) {\n          _this20.refreshToken().then(res => {\n            if (res.ok) _this20.updateProfilePicture(file, username, 1);else _this20.route.navigate(['/login']);\n          });\n        }\n        return imagePost;\n      })();\n    }\n    /*\n        DEEP\t\tnumber that is used as flag to make the call to refresh token when needed\n         send GET request that retrieve all registered user from db\n    */\n    getUser(deep) {\n      var _this21 = this;\n      return _asyncToGenerator(function* () {\n        const userRes = yield fetch(API.GET_USER_LIST_ADMIN, {\n          headers: {\n            \"authorization\": \"Bearer \" + _this21.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          method: \"GET\"\n        });\n        if (userRes.status == 401 && deep == undefined) {\n          _this21.refreshToken().then(res => {\n            if (res.ok) _this21.getUser(1);else _this21.route.navigate(['/login']);\n          });\n        }\n        if (userRes.ok) return yield userRes.json();else return {};\n      })();\n    }\n    /*\n        USERNAMETODELETE\tusername that will be used from server to know what user to delete\n         send DELETE request with a username that need to be deleted\n    */\n    deleteUser(usernameToDelete) {\n      var _this22 = this;\n      return _asyncToGenerator(function* () {\n        if (!confirm(`Do you really want to delete this user (${usernameToDelete})`)) return;\n        fetch(API.DELETE_USER + `?username=${usernameToDelete}`, {\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this22.gFunc.getJwtString()\n          },\n          method: \"DELETE\"\n        }).then(() => {\n          window.location.reload();\n        }).catch(err => {\n          alert(\"something went wrong...\");\n          console.log(\"ERROR WHILE REMOVING USER \", err);\n        });\n      })();\n    }\n    /*\n        EVENTIDTODELETE\t\tevent-id that will be used from server to know which event to delete\n        EVENTTITLE\t\t\ttitle of the event that will be deleted\n         send DELETE request with a event id that will be used to deleted the requested event\n    */\n    deleteEvent(eventIdToDelete, eventTitle) {\n      var _this23 = this;\n      return _asyncToGenerator(function* () {\n        if (!confirm(`Do you really want to delete this user (${eventTitle})`)) return;\n        fetch(API.DELETE_EVENT + `?id=${eventIdToDelete}`, {\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this23.gFunc.getJwtString()\n          },\n          method: \"DELETE\"\n        }).then(data => {\n          if (data.ok) {\n            _this23.route.navigate(['']).then(() => {\n              window.location.reload();\n            });\n          }\n        }).catch(err => {\n          alert(\"something went wrong...\");\n          console.log(\"ERROR WHILE REMOVING EVENT \", err);\n        });\n      })();\n    }\n    /*\n        send POST request that simply ask to backend to marke the current user as logged out\n        and then delete the current JWT stored in browser\n    */\n    logout() {\n      var _this24 = this;\n      return _asyncToGenerator(function* () {\n        fetch(API.POST_LOGOUT, {\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this24.gFunc.getJwtString()\n          },\n          method: \"POST\"\n        }).then(res => {\n          if (res.ok) {\n            document.cookie = ' authorization=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n            _this24.route.navigate(['']).then(() => {\n              window.location.reload();\n            });\n          } else {\n            alert(\"something went wrong... retry\");\n            _this24.route.navigate(['']).then(() => {\n              window.location.reload();\n            });\n          }\n        }).catch(err => {\n          console.log(\"ERROR WHILE LOGGING OUT: \", err);\n        });\n      })();\n    }\n    search(type, title, place, timeFrom, timeTo, categories) {\n      return _asyncToGenerator(function* () {\n        let categoryList = \"\";\n        let res;\n        if (categories != undefined) {\n          for (let el of categories) categoryList += el + \",\";\n          categoryList = categoryList.substring(0, categoryList.length - 1);\n        }\n        res = yield fetch(API.GET_SEARCH_EVENT + `?type=${type}&${title != undefined ? \"search=\" + title : \"\"}\n\t\t${place != undefined ? \"search=\" + place : \"\"}\n\t\t${categories != undefined ? \"categories=\" + categoryList : \"\"}\n\t\t${timeFrom != undefined ? \"from=\" + timeFrom : \"\"}\n\t\t${timeTo != undefined && timeFrom == undefined ? \"to=\" + timeTo : \"\"}\n\t\t${timeTo != undefined && timeFrom != undefined ? \"&to=\" + timeTo : \"\"}`, {\n          method: \"GET\"\n        });\n        if (res.ok) {\n          let js = yield res.json();\n          return js;\n        } else {\n          console.log(\"ERROR IN SEARCH...\");\n          return [];\n        }\n      })();\n    }\n    subscribeEvent(id, deep) {\n      var _this25 = this;\n      return _asyncToGenerator(function* () {\n        fetch(API.PUT_REGISTER_TO_EVENT + `?eventId=${id}`, {\n          method: \"PUT\",\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this25.gFunc.getJwtString()\n          }\n        }).then(data => {\n          if (data.status == 401 && deep == undefined) {\n            _this25.refreshToken().then(res => {\n              if (res.ok) _this25.subscribeEvent(id, 1);else _this25.route.navigate(['/login']);\n            });\n          }\n          if (data.ok) window.location.reload();\n        }).catch(err => {\n          console.log(\"ERROR WHILE UNSUBSCRIBING...\", err);\n        });\n      })();\n    }\n    unsubscribeEvent(id, deep) {\n      var _this26 = this;\n      return _asyncToGenerator(function* () {\n        fetch(API.PUT_UNREGISTER_TO_EVENT + `?eventId=${id}`, {\n          method: \"PUT\",\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this26.gFunc.getJwtString()\n          }\n        }).then(data => {\n          if (data.status == 401 && deep == undefined) {\n            _this26.refreshToken().then(res => {\n              if (res.ok) _this26.subscribeEvent(id, 1);else _this26.route.navigate(['/login']);\n            });\n          }\n          if (data.ok) window.location.reload();\n        }).catch(err => {\n          console.log(\"ERROR WHILE UNSUBSCRIBING...\", err);\n        });\n      })();\n    }\n    blockUser(usernameToBlock) {\n      var _this27 = this;\n      return _asyncToGenerator(function* () {\n        fetch(API.PUT_BLOCK_USER + `?username=${usernameToBlock}`, {\n          method: \"PUT\",\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this27.gFunc.getJwtString()\n          }\n        }).then(data => {\n          if (data.ok) window.location.reload();\n        }).catch(err => {\n          console.log(\"ERROR WHILE BLOCKING USER...\", err);\n        });\n      })();\n    }\n    unblockUser(usernameToUnblock) {\n      var _this28 = this;\n      return _asyncToGenerator(function* () {\n        fetch(API.PUT_UNBLOCK_USER + `?username=${usernameToUnblock}`, {\n          method: \"PUT\",\n          credentials: 'include',\n          headers: {\n            \"authorization\": \"Bearer \" + _this28.gFunc.getJwtString()\n          }\n        }).then(data => {\n          if (data.ok) window.location.reload();\n        }).catch(err => {\n          console.log(\"ERROR WHILE BLOCKING USER...\", err);\n        });\n      })();\n    }\n    getNotification(deleteNotification, deep) {\n      var _this29 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.GET_NOTIFICATION + `?delete=${deleteNotification}`, {\n          headers: {\n            \"authorization\": \"Bearer \" + _this29.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          method: \"GET\"\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this29.refreshToken().then(res => {\n            if (res.ok) _this29.getNotification(deleteNotification, 1);\n          });\n        }\n        if (res.ok) {\n          if (deleteNotification == \"true\") window.location.reload();\n          let tempJson = yield res.json();\n          return tempJson;\n        }\n        return JSON.parse(\"[]\");\n      })();\n    }\n    getEventImminent(deep) {\n      var _this30 = this;\n      return _asyncToGenerator(function* () {\n        const res = yield fetch(API.GET_IMMINENT_EVENT, {\n          headers: {\n            \"authorization\": \"Bearer \" + _this30.gFunc.getJwtString()\n          },\n          credentials: 'include',\n          method: \"GET\"\n        });\n        if (res.status == 401 && deep == undefined) {\n          _this30.refreshToken().then(res => {\n            if (res.ok) _this30.getEventImminent(1);\n          });\n        }\n        if (res.ok) {\n          let tempJson = yield res.json();\n          return tempJson;\n        }\n        return JSON.parse(\"[]\");\n      })();\n    }\n    constructor(route, newEvent, events, gFunc) {\n      this.route = route;\n      this.newEvent = newEvent;\n      this.events = events;\n      this.gFunc = gFunc;\n    }\n    static #_ = this.ɵfac = function ApiCallService_Factory(t) {\n      return new (t || ApiCallService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.NewEventService), i0.ɵɵinject(i3.EventsService), i0.ɵɵinject(i4.GeneralFuncService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiCallService,\n      factory: ApiCallService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiCallService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}