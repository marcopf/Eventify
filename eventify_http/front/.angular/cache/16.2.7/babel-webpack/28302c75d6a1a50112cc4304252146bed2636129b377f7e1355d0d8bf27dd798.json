{"ast":null,"code":"import { sha256 } from 'js-sha256';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api-call.service\";\nimport * as i2 from \"@angular/router\";\n//once small pre-check is done that api for login is called and username and password\n//are passed inside the body\nfunction prepareAndPerformLogin(login, api, route, dup_this) {\n  const formEl = document.querySelector(\"#loginForm\");\n  const formData = new FormData(formEl);\n  const data = {};\n  formData.delete('password');\n  formData.set('password', sha256(login.password));\n  formData.forEach((value, key) => {\n    data[key] = value;\n  });\n  api.login(data).then(data => {\n    if (data.ok) {\n      login.password = \"\";\n      login.username = \"\";\n      route.navigate(['/events']).then(() => {\n        window.location.reload();\n      });\n      dup_this.loginError = false;\n    } else {\n      dup_this.loginError = true;\n      formEl.classList.toggle(\"shake\");\n      setTimeout(() => {\n        formEl.classList.toggle(\"shake\");\n      }, 500);\n    }\n  }).catch(err => {\n    console.log(\"LOGIN ERROR: \", err);\n  });\n}\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    //PERFOM ALL THE CHECK ON INPUT AND MAKE THE CALL TO RELATIVE API IF ALL IS OK\n    loginSubmit($event) {\n      const formEl = document.querySelector(\"#loginForm\");\n      $event.preventDefault();\n      if (this.login.password != \"\" && this.login.username != \"\") prepareAndPerformLogin(this.login, this.api, this.route, this);else {\n        formEl.classList.toggle(\"shake\");\n        setTimeout(() => {\n          formEl.classList.toggle(\"shake\");\n        }, 500);\n        this.loginError = true;\n      }\n    }\n    constructor(api, route) {\n      this.api = api;\n      this.route = route;\n      this.error = false;\n      this.error_text = [];\n      this.loginError = false;\n      this.login = {\n        username: \"\",\n        password: \"\"\n      };\n    }\n    static #_ = this.ɵfac = function LoginService_Factory(t) {\n      return new (t || LoginService)(i0.ɵɵinject(i1.ApiCallService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginService,\n      factory: LoginService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}